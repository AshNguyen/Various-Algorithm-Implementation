{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100</td>\n",
       "      <td>82</td>\n",
       "      <td>73</td>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "      <td>70</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>82</td>\n",
       "      <td>96</td>\n",
       "      <td>83</td>\n",
       "      <td>81</td>\n",
       "      <td>67</td>\n",
       "      <td>65</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>73</td>\n",
       "      <td>83</td>\n",
       "      <td>94</td>\n",
       "      <td>73</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>72</td>\n",
       "      <td>81</td>\n",
       "      <td>73</td>\n",
       "      <td>97</td>\n",
       "      <td>62</td>\n",
       "      <td>60</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>72</td>\n",
       "      <td>67</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>98</td>\n",
       "      <td>71</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>70</td>\n",
       "      <td>65</td>\n",
       "      <td>61</td>\n",
       "      <td>60</td>\n",
       "      <td>71</td>\n",
       "      <td>89</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>80</td>\n",
       "      <td>70</td>\n",
       "      <td>67</td>\n",
       "      <td>63</td>\n",
       "      <td>82</td>\n",
       "      <td>79</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0   1   2   3   4   5   6\n",
       "0  100  82  73  72  72  70  80\n",
       "1   82  96  83  81  67  65  70\n",
       "2   73  83  94  73  62  61  67\n",
       "3   72  81  73  97  62  60  63\n",
       "4   72  67  62  62  98  71  82\n",
       "5   70  65  61  60  71  89  79\n",
       "6   80  70  67  63  82  79  94"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "\n",
    "def LCS(X, Y):\n",
    "    m = len(X)\n",
    "    n = len(Y)\n",
    "    C = np.zeros((m+1,n+1),dtype=int)\n",
    "    for i in range(1, m + 1):\n",
    "        for j in range(1, n + 1):\n",
    "            if X[i - 1] == Y[j - 1]:\n",
    "                C[i][j] = C[i - 1][j - 1] + 1\n",
    "            else:\n",
    "                C[i][j] = max(C[i][j - 1], C[i - 1][j])\n",
    "    return C\n",
    "    \n",
    "\n",
    "def lenLCS(dna):\n",
    "    l=len(dna)\n",
    "    tab=np.zeros((l,l),dtype=int)\n",
    "    for _ in range(l):\n",
    "        for i in range(l):\n",
    "            C=LCS(dna[_][1],dna[i][1])\n",
    "            tab[_,i]=C[len(dna[_][1])][len(dna[i][1])]\n",
    "    return pd.DataFrame(tab)\n",
    "    \n",
    "DNAs=[(0,'TTCTACGGGGGGAGACCTTTACGAATCACACCGGTCTTCTTTGTTCTAGCCGCTCTTTTTCATCAGTTGCAGCTAGTGCATAATTGCTCACAAACGTATC'), \n",
    "      (1,'TCTACGGGGGGCGTCATTACGGAATCCACACAGGTCGTTATGTTCATCTGTCTCTTTTCACAGTTGCGGCTTGTGCATAATGCTCACGAACGTATC'), \n",
    "      (2,'TCTACGGGGGGCGTCTATTACGTCGCCAACAGGTCGTATGTTCATTGTCATCATTTTCATAGTTGCGGCCTGTGCGTGCTTACGAACGTATTCC'), \n",
    "      (3,'TCCTAACGGGTAGTGTCATACGGAATCGACACGAGGTCGTATCTTCAATTGTCTCTTCACAGTTGCGGCTGTCCATAAACGCGTCCCGAACGTTATG'), \n",
    "      (4,'TATCAGTAGGGCATACTTGTACGACATTCCCCGGATAGCCACTTTTTTCCTACCCGTCTCTTTTTCTGACCCGTTCCAGCTGATAAGTCTGATGACTC'), \n",
    "      (5,'TAATCTATAGCATACTTTACGAACTACCCCGGTCCACGTTTTTCCTCGTCTTCTTTCGCTCGATAGCCATGGTAACTTCTACAAAGTTC'), \n",
    "      (6,'TATCATAGGGCATACTTTTACGAACTCCCCGGTGCACTTTTTTCCTACCGCTCTTTTTCGACTCGTTGCAGCCATGATAACTGCTACAAACTTC')]\n",
    "\n",
    "lenLCS(DNAs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0, 14, 21, 25, 26, 19, 14],\n",
       "       [18,  0, 11, 16, 31, 24, 24],\n",
       "       [27, 13,  0, 24, 36, 28, 27],\n",
       "       [28, 15, 21,  0, 36, 29, 31],\n",
       "       [28, 29, 32, 35,  0, 18, 12],\n",
       "       [30, 31, 33, 37, 27,  0, 15],\n",
       "       [20, 26, 27, 34, 16, 10,  0]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def diff(dna):\n",
    "    l=len(dna)\n",
    "    tab=np.zeros((l,l),dtype=int)\n",
    "    for _ in range(l):\n",
    "        for i in range(l):\n",
    "            C=LCS(dna[_][1],dna[i][1])\n",
    "            a=C[len(dna[_][1])][len(dna[i][1])]\n",
    "            tab[_,i]=abs(len(dna[i][1])-a)\n",
    "    return tab\n",
    "\n",
    "diff(DNAs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "336"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def PossibleLCS(C, X, Y, i=None, j=None):\n",
    "    if i is None:\n",
    "        i = len(X)\n",
    "    if j is None:\n",
    "        j = len(Y)\n",
    "    if i == 0 or j == 0:\n",
    "        return set([\"\"])\n",
    "    elif X[i - 1] == Y[j - 1]:\n",
    "        return set([Z + X[i - 1] for Z in PossibleLCS(C, X, Y, i - 1, j - 1)])\n",
    "    else:\n",
    "        R = set()\n",
    "        if C[i][j - 1] >= C[i - 1][j]:\n",
    "            R.update(PossibleLCS(C, X, Y, i, j - 1))\n",
    "        if C[i - 1][j] >= C[i][j - 1]:\n",
    "            R.update(PossibleLCS(C, X, Y, i - 1, j))\n",
    "        return R\n",
    "    \n",
    "def PosLCS(dna):\n",
    "    l=len(dna)\n",
    "    tab=np.zeros((l,l),dtype=int)\n",
    "    for _ in range(l):\n",
    "        for i in range(l):\n",
    "            C=LCS(dna[_][1],dna[i][1])\n",
    "            tab[_,i]=len(PossibleLCS(C,dna[_][1],dna[i][1]))\n",
    "    return pd.DataFrame(tab)\n",
    "\n",
    "C=LCS(DNAs[0][1],DNAs[5][1])\n",
    "len(PossibleLCS(C,DNAs[0][1],DNAs[5][1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.,  14.,   0.,   0.,   0.,   0.,  14.],\n",
       "       [  0.,   0.,  11.,   0.,   0.,   0.,   0.],\n",
       "       [  0.,   0.,   0.,   0.,   0.,   0.,   0.],\n",
       "       [  0.,  15.,   0.,   0.,   0.,   0.,   0.],\n",
       "       [  0.,   0.,   0.,   0.,   0.,   0.,  12.],\n",
       "       [  0.,   0.,   0.,   0.,   0.,   0.,   0.],\n",
       "       [  0.,   0.,   0.,   0.,   0.,  10.,   0.]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.sparse import csr_matrix as mat \n",
    "from scipy.sparse.csgraph import minimum_spanning_tree as mst \n",
    "\n",
    "X = mat([[ 0, 14, 21, 25, 26, 19, 14],\n",
    "       [18,  0, 11, 16, 31, 24, 24],\n",
    "       [27, 13,  0, 24, 36, 28, 27],\n",
    "       [28, 15, 21,  0, 36, 29, 31],\n",
    "       [28, 29, 32, 35,  0, 18, 12],\n",
    "       [30, 31, 33, 37, 27,  0, 15],\n",
    "       [20, 26, 27, 34, 16, 10,  0]])\n",
    "\n",
    "results=mst(X)\n",
    "results.toarray()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
